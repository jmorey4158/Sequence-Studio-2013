<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RevealedDesigns.SequenceStudio.Search</name>
    </assembly>
    <members>
        <member name="T:SequenceStudio.Find">
            <summary>
            The Find Class contains static Methods for finding mathces or non-matches between two strings or 
            within a single string.
            </summary>
            <remarks>The Find class and its methods are pat of an internal set of functionality. You may call
            these methods but they are typically called from helper methods that also perform validation
            and other pre-requisite checks before calling these methods.
            <para>These methods are intended for use with DNA, RNA, and ploypeptide sequences, but can be used with
            any string. However, using with strings might produce non-sense result sets.</para>
            </remarks>
        </member>
        <member name="M:SequenceStudio.Find.MatchSet(System.String,System.String,System.Double)">
            <summary>
            Finds all places where there is at least a <paramref name="threshold"/> percentage match
            of a shorter String <paramref name="sequence2"/> within a longer String <paramref name="sequence1"/>.
            </summary>
            <param name="sequence1">String - the sequence to be matched against.</param>
            <param name="sequence2">String - the pattern to match agasint the sequence.
            <para>NOTE - If the <paramref name="sequence2"/> is longer than the
            <paramref name="sequence1"/> it is being matched against a 
            SequenceParameterException will be raised.</para></param>
            <param name="threshold">Double - any match below this percentage is not counted.</param>
            <returns>Dictionary(Int32, Double) - the list of matches found 
            that are greater than, or equal to, the <paramref name="threshold"/>. 
            The Int32 indicates where on the <paramref name="sequence1"/> the match is found 
            and 'Double' indicates the percentage of match between 
            <paramref name="sequence2"/> and <paramref name="sequence1"/> at that location.</returns>
            <exception cref="T:SequenceStudio.SequenceParameterException">The shortString is longer than the longString.</exception>
            <remarks>This method is intended to be used by helper methods in Sequence Studio 2011, where the input
            Strings are automatically validated to make sure that DNA, RNA, and Polypeptide sequences are being
            used as inputs. However, you can call this method directly using any String as inputs. 
            If the input strings are not of the same type the results not reprsent true matches.</remarks>
        </member>
        <member name="M:SequenceStudio.Find.NonMatchPattern(System.String,System.String)">
            <summary>
            Finds all locations along <paramref name="string1"/> where <paramref name="string2"/> 
            does not match <paramref name="string1"/>.</summary>
            <param name="string1">String - the sequence to be matched.</param>
            <param name="string2">String - the sequence to match agasint the sequence.</param>
            <returns>List(Int32)- the list of mismatches found.</returns>
            <exception cref="T:SequenceStudio.SequenceParameterException">One or both input Strings is empty or Null.</exception>
            <remarks>This method returns a list of the locations where any character-character missmatches
            are found between the two strings. The matching algorythm aligns the two strings starting at
            position[0] and performs a match between each string at position[n]. 
            <para>The method does not attempt to fins the maximum matching alignment for the strings.
            The two input strings can be different sizes. 
            The matching algorythm stops at the end of the shortest string.</para></remarks>
        </member>
        <member name="M:SequenceStudio.Find.MatchPattern(System.String,System.String)">
            <summary>
            Finds all locations along <paramref name="string1"/> where <paramref name="string2"/> 
            matched <paramref name="string1"/>.</summary>
            <param name="string1">String - the sequence to be matched.</param>
            <param name="string2">String - the sequence to match agasint the sequence.</param>
            <returns>List(Int32)- the list of match locations found.</returns>
            <exception cref="T:SequenceStudio.SequenceParameterException">One or both input Strings is empty or Null.</exception>
            <remarks>This method returns a list of the locations where any character-character matches
            are found between the two strings. The matching algorythm aligns the two strings starting at
            position[0] and performs a match between each string at position[n]. 
            <para>The method does not attempt to find the maximum matching alignment for the strings.
            The two input strings can be different sizes. 
            The matching algorythm stops at the end of the shortest string.</para></remarks>
        </member>
        <member name="M:SequenceStudio.Find.LongestContiguousMisMatchRegions(System.String,System.String)">
            <summary>
            Finds the longest contiguous region of non-matches between two Strings.
            The method returns only 1 entry, unless there is more than one region with the same characterisitcs.
            </summary>
            <dependencies>
            This Method calls the following Methods:
            ValidateSequence();
            BestMatchesPercentage();
            ValuesDescending();
            </dependencies>
            <param name="seq1">String - the sequence to be matched against</param>
            <param name="seq2">String - the pattern to match agasint the sequence.</param>
            <returns>Dictionary(Int32,Int32)- The list of the start and length of the match region.</returns>
        </member>
        <member name="M:SequenceStudio.Find.MatchSequences(System.String,System.String,System.Double)">
            <summary>
            This method takes two Strings and finds the longest contiguous match region between them.
            This match usually signifies an area of overlap if these sequences are sequential in a 
            longer sequence. 
            </summary>
            <dependencies>
            This Method called the following Methods:
            LongestContiguousMatchRegion();
            </dependencies>
            <param name="sequence1">String - the first sequence to be matched.</param>
            <param name="sequence2">String - the second sequence to be matched.</param>
            <param name="threshold">Double - the percentage of similarity required to qualify as a "match".</param>
            <returns>Dictionary(Int32 locus, Int32 length)- this is a list of the match(es) that qualify.
            Typically there will be only one match.</returns>
        </member>
        <member name="M:SequenceStudio.Find.BestMatchesPercentage(System.String,System.String)">
            <summary>
            Finds the best match by percentage of all matches between two Strings.
            </summary>
            <dependencies>
            This Method also calls the following Methods:
            MatchSet();
            ValuesDescending(Int32,Double);
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="pattern">String - the pattern to match agasint the sequence.</param>
            <returns>Dictionary(Int32, Double)- the list of matches found that are >= the threshold.</returns>
        </member>
        <member name="M:SequenceStudio.Find.LongestContiguousMatchRegions(System.String,System.String)">
            <summary>
            Finds the longest contiguous match regions between two Strings. Usually returns only 1 match, unless
            there is more than one match with the same characterisitcs.
            </summary>
            <dependencies>
            ValidateSequence();
            BestMatchesPercentage();
            ValuesDescending();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="pattern">String - the pattern to match agasint the sequence. 
            NOTE - the pattern and the sequence must be the same sequecne type (e.g. DNA-DNA, RNA-RNA,
            Polypeptide-Polypeptide. IF they are not the matches will be non-sense.</param>
            <returns>Dictionary(Int32 loc, Double percentage)- populated and passed back
            to the caller.</returns>
        </member>
        <member name="M:SequenceStudio.Find.ContiguousMatchRegions(System.String,System.String,System.Double)">
            <summary>
            Finds all contiguous match regions between two Stirng. Two Strings are 
            passed in: (1) sequence and (2) pattern. This method returns all matches over the 'threashold'.
            </summary>
            <dependencies>
            This Method also calls the following Methods:
            ValidateSequence();
            BestMatchesPercentage();
            ValuesDescending();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="pattern">String - the pattern to match agasint the sequence.</param>
            <param name="threshold">Double - the percentage at or above which a match is recorded.</param>
            <returns name="matches">Dictionary(Int32 loc, Double percentage)- The list of matches.</returns>
        </member>
        <member name="M:SequenceStudio.Find.SelfMatchRegion(System.String,System.Double)">
            <summary>
            Finds all self-matches by percentage on a given String. The String is 'folded' back over itself and 
            matches are searched for between the String and its Reverse String.
            </summary>
            <dependencies>
            This Method also calls the following Methods:
            MatchSet();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="threshold">The percentage to stop matching at.</param>
            <returns>Dictionary(Int32, Double)- the list of matches found that are >= the threshold.</returns>
        </member>
        <member name="M:SequenceStudio.Find.LongestContiguousSelfMatch(System.String)">
            <summary>
            Finds anywhere along the sequence's own length that it can match to itself 
            and determines the longest contiguous area of this match.
            </summary>
            <remarks>This function builds a backwards strand equal to half the strand length and then runs 
            LongestContiguousMatchRegions(sequence, pattern) with the sequence and the backwards strand.</remarks>
            <dependencies>
            This Methods also calls the following Methods:
            LongestContiguousMatchRegion();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against itself.</param>
            <returns>ref Dictionary(Int32, Int32)- the list of starting point and length ofmatches found.</returns>
        </member>
        <member name="M:SequenceStudio.Find.MatchInterval(System.String,System.String,System.Collections.Generic.List{System.Int32},System.Double)">
            <summary>
            Finds all matches by percentage at a given interval between two Strings. 
            If the match of 'threashold' percent is at a given interval then it is recorded.
            </summary>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="pattern">String - the pattern to match agasint the sequence.</param>
            <param name="threshold">The percentage at which a match is recorded.</param>
            <param name="interval">List(Int32) a list of intervals between this match and the next one.</param>
            <returns>Dictionary(Int32, Int32)- the list of matches found that are => the threshold.</returns>
        </member>
        <member name="M:SequenceStudio.Find.Repeats(System.String,System.Int32)">
            <summary>
            Finds all places on the strand where the sequence of 'length' units long repeats on the strand.
            </summary>
            <dependencies>
            This Method also calls the following Methods:
            MatchSet();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="length">UInt32 - the length of pattern to search with.</param>
            <returns>Dictionary(Int32, Int32) - the set of matches that 
            meets the criteria. The list entries are the location where the match starts and the length of the match.</returns>
            <overloads>
            Repeats(String sequence, UInt16 length,ref Dictionary(Int32, Int32) repeats)
            Repeats(String sequence, Double threshold, UInt16 length,ref Dictionary(Int32, Int32) repeats)
            </overloads>
        </member>
        <member name="M:SequenceStudio.Find.Repeats(System.String,System.Int32,System.Double)">
            <summary>
            Finds all places on the strand where the sequence of 'length' units long repeats on the strand.
            </summary>
            <dependencies>
            This Method also calls the following Methods:
            MatchSet();
            </dependencies>
            <param name="sequence">String - the sequence to be matched against</param>
            <param name="length">UInt32 - the length of pattern to search on.</param>
            <param name="threshold">Double - the percentage match threshold to record matches.</param> 
            <returns>Dictionary(Int32, Int32) - the set of matches that meets the criteria. 
            The list entries are the location where the match starts and the length of the match.</returns>
            <overloads>
            Repeats(String sequence, UInt32 length,ref Dictionary(Int32, Int32) repeats)
            Repeats(String sequence, Double threshold, UInt16 length,ref Dictionary(Int32, Int32) repeats)
            </overloads>
        </member>
        <member name="M:SequenceStudio.Find.MatchGrid(System.Collections.Generic.Dictionary{System.Int32,System.Int32},System.String)">
            <summary>
            Returns the actual sequence matches for the given locations and length match set.</summary>
            <param name="sequence">String - the sequence to be matched against.</param>
            <param name="matches">Dictionary(int,int) - the loci and length of the matches.</param>
            <returns>String[] - the set of string representing the actual matches on 
            <paramref name="sequence"/> as provided in the location and length in 
            <paramref name="matches"/></returns>
            <remarks>This method is intended to be used to generate the actual match sequences
            for a List(int,int) generated using <paramref name="sequence"/>. MatchGrids produced 
            using another string may represent non-sense.</remarks>
        </member>
        <member name="M:SequenceStudio.Find.EncryptionBlock(SequenceStudio.DNA)">
            <summary>
            Finds any Encryption Blocks in the given DNA seuence.
            </summary>
            <param name="d">DNA Class instance.</param>
            <returns>List(Tuple(int,int)) - the list of all Encryption Blocks, starting at N and of length L.
            NOTE - Becasue the entries can have repeated Key vlaues, a Tuple was used instead of Dictionary().</returns>
        </member>
        <member name="M:SequenceStudio.Find.FormatMatchPattern(System.Collections.Generic.List{System.Int32},System.String,System.String)">
            <summary>
            Returns a String[] of [0] = first sequence, [2] = MatchGrid string, [3] = second sequence. The MatchGrid
            string shows "_" for non-matches and "|" for matches.
            </summary>
            <param name="list">List(int) - list of all places on the <paramref name="strand"/> where the 
            <paramref name="pattern"/> matches it.</param>
            <param name="strand">String - the sequence being matched to.</param>
            <param name="pattern">String - the sequence being matched.</param>
            <returns>String[3] - [0] = first sequence, [2] = MatchGrid string, [3] = second sequence.</returns>
        </member>
        <member name="M:SequenceStudio.Find.FormatNonMatchPattern(System.Collections.Generic.List{System.Int32},System.String,System.String)">
            <summary>
            Returns a String[] of [0] = first sequence, [2] = MatchGrid string, [3] = second sequence. The MatchGrid
            string shows "_" for non-matches and "|" for matches.
            </summary>
            <param name="list">List(int) - list of all places on the <paramref name="strand"/> where the 
            <paramref name="pattern"/> does NOT match it.</param>
            <param name="strand">String - the sequence being matched to.</param>
            <param name="pattern">String - the sequence being matched.</param>
            <returns>String[3] - [0] = first sequence, [2] = MatchGrid string, [3] = second sequence.</returns>
        </member>
        <member name="T:SequenceStudio.Math">
            <summary>
            This class contains static classes for returing mathmatical series or for testing if a 
            given number belongs to a given mathmatical series type.
            </summary>
        </member>
        <member name="M:SequenceStudio.Math.FibonacciSeries(System.Int32)">
            <summary>
            Generates a Fibonacci series upto the limit <paramref name="limit"/>.</summary>
            <param name="limit">Int32 - the largest number of the returned series.</param>
            <returns>List(Int32) - the list of the returned series.</returns>
        </member>
        <member name="M:SequenceStudio.Math.PrimeSeries(System.Int32)">
            <summary>
            Generates a series of prime numbers upto 'limit'
            </summary>
            <param name="limit">Int32 - the largest number to return</param>
            <returns>List(Int32) - the list of the returned series.</returns>
        </member>
        <member name="M:SequenceStudio.Math.IsPrime(System.Int32)">
            <summary>
            Returns a Boolean 'true' if the input interger is a prime number
            </summary>
            <param name="number">Int32 - the number to be examined</param>
            <returns>Boolean IsPrime</returns>
        </member>
        <member name="M:SequenceStudio.Math.NumericalPattern(System.String,System.Collections.Generic.List{System.Int32},System.Text.StringBuilder@)">
            <summary>
            Generates a string of all the residues at the interval.
            </summary>
            <param name="seq">String - the DNA, RNA, or Polypeptide sequence</param>
            <param name="interval">A list of intergers that define the position at which to grab the residue.</param>
            <param name="pattern">ref StringBuilder the resultant sequence.</param>
        </member>
        <member name="M:SequenceStudio.Math.FibonacciPattern(System.String,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Generates a string of all the residues at intervals that follow the Fibonacci numbers upto 'limit'..
            </summary>
            <param name="seq">String - the DNA, RNA, or Polypeptide sequence</param>
            <param name="limit">The largest number (position) to be returned.</param>
            <param name="pattern">ref StringBuilder the resultant sequence.</param>
        </member>
        <member name="M:SequenceStudio.Math.PrimePattern(System.String,System.Int32,System.Text.StringBuilder@)">
            <summary>
            Generates a string of all the residues at intervals that follow the seies of prime numbers upto 'limit'.
            </summary>
            <param name="seq">String - the DNA, RNA, or Polypeptide sequence</param>
            <param name="limit">The largest number (position) to be returned.</param>
            <param name="pattern">ref StringBuilder the resultant sequence.</param>
        </member>
        <member name="M:SequenceStudio.Serialize.SerializeToXML(System.Collections.Generic.Dictionary{System.Int32,System.Double})">
            <summary>
            Serializes a set of matches (locus, percentage) to an in-memory XMLDocument class instance
            </summary>
            <param name="matches">Dictionary(Int32,Double) locus, percentage match</param>
            <returns>XmlDocument class instance</returns>
        </member>
        <member name="M:SequenceStudio.Serialize.SerializeToXML(System.Collections.Generic.Dictionary{System.Int32,System.Int32})">
            <summary>
            Serializes a set of matches (locus, length) to an in-memory XMLDocument class instance
            </summary>
            <param name="matches">Dictionary(Int32,Int32) locus, percentage match</param>
            <returns>XmlDocument class instance</returns>
        </member>
        <member name="M:SequenceStudio.Sort.ValuesDescending(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Double) in decending order by kp.Value
            </summary>
            <param name="matches">Dictionary(Int32,Double)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.ValuesDescending(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Int32) in decending order by kp.Value
            </summary>
            <param name="matches">Dictionary(Int32,Int32)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.ValuesAscending(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Double) in ascending order by kp.Value
            </summary>
            <param name="matches">Dictionary(Int32,Double)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.ValuesAscending(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Int32) in ascending order by kp.Value
            </summary>
            <param name="matches">Dictionary(Int32,Int32)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.KeysDescending(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Double) in decending order by kp.Key
            </summary>
            <param name="matches">Dictionary(Int32,Double)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.KeysDescending(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Int32) in decending order by kp.Key
            </summary>
            <param name="matches">Dictionary(Int32,Int32)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.KeysAscending(System.Collections.Generic.Dictionary{System.Int32,System.Double}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Double) in ascending order by kp.Key
            </summary>
            <param name="matches">Dictionary(Int32,Double)- passed back to caller.</param>
        </member>
        <member name="M:SequenceStudio.Sort.KeysAscending(System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            This method orders the passed-in Dictionary(Int32,Int32) in ascending order by kp.Key
            </summary>
            <param name="matches">Dictionary(Int32,Int32)- passed back to caller.</param>
        </member>
    </members>
</doc>
